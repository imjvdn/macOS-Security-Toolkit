#!/bin/bash
#
# malware-scanner.sh
# macOS Security Toolkit
#
# This script scans the macOS system for potential malware, suspicious files,
# and known malicious indicators. It uses native macOS tools and commands
# to identify potential threats without requiring external dependencies.
#

# Set strict error handling
set -e
set -o pipefail

# Set colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script variables
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
OUTPUT_DIR="$HOME/macOS_Security_Toolkit/reports/malware_scan_$TIMESTAMP"
LOG_FILE="$OUTPUT_DIR/malware_scan.log"

# Create output directory
mkdir -p "$OUTPUT_DIR"
touch "$LOG_FILE"

# Function to log messages
log_message() {
    local message="$1"
    local level="$2"
    local color="$NC"
    
    case "$level" in
        "INFO") color="$BLUE" ;;
        "SUCCESS") color="$GREEN" ;;
        "WARNING") color="$YELLOW" ;;
        "ERROR") color="$RED" ;;
    esac
    
    echo -e "${color}[$level] $message${NC}"
    echo "[$level] $message" >> "$LOG_FILE"
}

# Function to check if script is run with elevated privileges
check_privileges() {
    if [ "$EUID" -ne 0 ]; then
        log_message "This script requires elevated privileges for complete results." "WARNING"
        log_message "Some checks will be limited. Consider running with sudo." "WARNING"
        return 1
    fi
    return 0
}

# Banner
display_banner() {
    echo -e "${BLUE}"
    echo "============================================================"
    echo "  macOS Malware Scanner"
    echo "  $(date)"
    echo "  Output directory: $OUTPUT_DIR"
    echo "============================================================"
    echo -e "${NC}"
}

# Function to check for known malware launch agents and daemons
check_launch_agents() {
    log_message "Checking for suspicious launch agents and daemons..." "INFO"
    
    echo "# Suspicious Launch Agents and Daemons" > "$OUTPUT_DIR/launch_agents.md"
    echo "Generated: $(date)" >> "$OUTPUT_DIR/launch_agents.md"
    echo "" >> "$OUTPUT_DIR/launch_agents.md"
    
    # List of suspicious keywords in launch agents
    SUSPICIOUS_KEYWORDS=("coin" "miner" "crypto" "adobe" "flash" "update" "helper" "cleaner" "clean" "plugin" "plugins" "crack" "cracked" "free" "torrent" "pirate")
    
    # Create a list of all launch agents and daemons
    find /Library/LaunchAgents /Library/LaunchDaemons ~/Library/LaunchAgents /System/Library/LaunchAgents /System/Library/LaunchDaemons -type f -name "*.plist" 2>/dev/null > "$OUTPUT_DIR/all_launch_agents.txt" || true
    
    log_message "Found $(wc -l < "$OUTPUT_DIR/all_launch_agents.txt") launch agents and daemons" "INFO"
    
    # Check for suspicious launch agents
    echo "## Potentially Suspicious Launch Agents" >> "$OUTPUT_DIR/launch_agents.md"
    echo "" >> "$OUTPUT_DIR/launch_agents.md"
    echo "| File | Label | Program | Suspicious Keywords |" >> "$OUTPUT_DIR/launch_agents.md"
    echo "|------|-------|---------|---------------------|" >> "$OUTPUT_DIR/launch_agents.md"
    
    SUSPICIOUS_COUNT=0
    
    while read -r agent; do
        if [ -f "$agent" ]; then
            # Extract the label and program
            label=$(defaults read "$agent" Label 2>/dev/null || echo "Unknown")
            program=$(defaults read "$agent" Program 2>/dev/null || echo "")
            
            if [ -z "$program" ]; then
                program_args=$(defaults read "$agent" ProgramArguments 2>/dev/null || echo "[]")
                program=$(echo "$program_args" | grep -o '"[^"]*"' | head -1 | tr -d '"' || echo "Unknown")
            fi
            
            # Check for suspicious keywords
            suspicious_found=""
            for keyword in "${SUSPICIOUS_KEYWORDS[@]}"; do
                if echo "$agent $label $program" | grep -i "$keyword" > /dev/null; then
                    if [ -z "$suspicious_found" ]; then
                        suspicious_found="$keyword"
                    else
                        suspicious_found="$suspicious_found, $keyword"
                    fi
                fi
            done
            
            if [ -n "$suspicious_found" ]; then
                echo "| $agent | $label | $program | $suspicious_found |" >> "$OUTPUT_DIR/launch_agents.md"
                SUSPICIOUS_COUNT=$((SUSPICIOUS_COUNT + 1))
            fi
        fi
    done < "$OUTPUT_DIR/all_launch_agents.txt"
    
    if [ "$SUSPICIOUS_COUNT" -eq 0 ]; then
        echo "No suspicious launch agents or daemons found." >> "$OUTPUT_DIR/launch_agents.md"
    else
        log_message "Found $SUSPICIOUS_COUNT potentially suspicious launch agents" "WARNING"
    fi
    
    # Check for unsigned launch agents (requires sudo)
    if check_privileges; then
        echo -e "\n## Unsigned Launch Agents" >> "$OUTPUT_DIR/launch_agents.md"
        echo "" >> "$OUTPUT_DIR/launch_agents.md"
        echo "| File | Label | Program |" >> "$OUTPUT_DIR/launch_agents.md"
        echo "|------|-------|---------|" >> "$OUTPUT_DIR/launch_agents.md"
        
        UNSIGNED_COUNT=0
        
        while read -r agent; do
            if [ -f "$agent" ]; then
                # Check if the agent is signed
                codesign -v "$agent" 2>/dev/null
                if [ $? -ne 0 ]; then
                    # Extract the label and program
                    label=$(defaults read "$agent" Label 2>/dev/null || echo "Unknown")
                    program=$(defaults read "$agent" Program 2>/dev/null || echo "")
                    
                    if [ -z "$program" ]; then
                        program_args=$(defaults read "$agent" ProgramArguments 2>/dev/null || echo "[]")
                        program=$(echo "$program_args" | grep -o '"[^"]*"' | head -1 | tr -d '"' || echo "Unknown")
                    fi
                    
                    echo "| $agent | $label | $program |" >> "$OUTPUT_DIR/launch_agents.md"
                    UNSIGNED_COUNT=$((UNSIGNED_COUNT + 1))
                fi
            fi
        done < "$OUTPUT_DIR/all_launch_agents.txt"
        
        if [ "$UNSIGNED_COUNT" -eq 0 ]; then
            echo "No unsigned launch agents found." >> "$OUTPUT_DIR/launch_agents.md"
        else
            log_message "Found $UNSIGNED_COUNT unsigned launch agents" "WARNING"
        fi
    else
        echo "Unable to check for unsigned launch agents. Run with sudo for complete results." >> "$OUTPUT_DIR/launch_agents.md"
    fi
    
    log_message "Launch agents check completed" "SUCCESS"
}

# Function to check for suspicious processes
check_suspicious_processes() {
    log_message "Checking for suspicious processes..." "INFO"
    
    echo "# Suspicious Processes" > "$OUTPUT_DIR/suspicious_processes.md"
    echo "Generated: $(date)" >> "$OUTPUT_DIR/suspicious_processes.md"
    echo "" >> "$OUTPUT_DIR/suspicious_processes.md"
    
    # List of suspicious process keywords
    SUSPICIOUS_KEYWORDS=("coin" "miner" "crypto" "xmr" "monero" "bitcoin" "btc" "eth" "nfts")
    
    # Get all running processes
    ps aux > "$OUTPUT_DIR/all_processes.txt"
    
    # Check for suspicious processes
    echo "## Potentially Suspicious Processes" >> "$OUTPUT_DIR/suspicious_processes.md"
    echo "" >> "$OUTPUT_DIR/suspicious_processes.md"
    echo "| PID | User | CPU | Memory | Command |" >> "$OUTPUT_DIR/suspicious_processes.md"
    echo "|-----|------|-----|--------|---------|" >> "$OUTPUT_DIR/suspicious_processes.md"
    
    SUSPICIOUS_COUNT=0
    
    for keyword in "${SUSPICIOUS_KEYWORDS[@]}"; do
        grep -i "$keyword" "$OUTPUT_DIR/all_processes.txt" | while read -r line; do
            pid=$(echo "$line" | awk '{print $2}')
            user=$(echo "$line" | awk '{print $1}')
            cpu=$(echo "$line" | awk '{print $3}')
            mem=$(echo "$line" | awk '{print $4}')
            cmd=$(echo "$line" | awk '{$1=$2=$3=$4=$5=$6=$7=$8=$9=$10=$11=""; print $0}' | sed 's/^ *//')
            
            echo "| $pid | $user | $cpu% | $mem% | $cmd |" >> "$OUTPUT_DIR/suspicious_processes.md"
            SUSPICIOUS_COUNT=$((SUSPICIOUS_COUNT + 1))
        done
    done
    
    # Check for high CPU usage processes (>50%)
    echo -e "\n## High CPU Usage Processes (>50%)" >> "$OUTPUT_DIR/suspicious_processes.md"
    echo "" >> "$OUTPUT_DIR/suspicious_processes.md"
    echo "| PID | User | CPU | Memory | Command |" >> "$OUTPUT_DIR/suspicious_processes.md"
    echo "|-----|------|-----|--------|---------|" >> "$OUTPUT_DIR/suspicious_processes.md"
    
    HIGH_CPU_COUNT=0
    
    awk '$3 > 50.0 {print}' "$OUTPUT_DIR/all_processes.txt" | while read -r line; do
        pid=$(echo "$line" | awk '{print $2}')
        user=$(echo "$line" | awk '{print $1}')
        cpu=$(echo "$line" | awk '{print $3}')
        mem=$(echo "$line" | awk '{print $4}')
        cmd=$(echo "$line" | awk '{$1=$2=$3=$4=$5=$6=$7=$8=$9=$10=$11=""; print $0}' | sed 's/^ *//')
        
        echo "| $pid | $user | $cpu% | $mem% | $cmd |" >> "$OUTPUT_DIR/suspicious_processes.md"
        HIGH_CPU_COUNT=$((HIGH_CPU_COUNT + 1))
    done
    
    if [ "$SUSPICIOUS_COUNT" -eq 0 ] && [ "$HIGH_CPU_COUNT" -eq 0 ]; then
        echo "No suspicious processes found." >> "$OUTPUT_DIR/suspicious_processes.md"
    else
        log_message "Found $SUSPICIOUS_COUNT potentially suspicious processes" "WARNING"
        log_message "Found $HIGH_CPU_COUNT high CPU usage processes" "WARNING"
    fi
    
    log_message "Process check completed" "SUCCESS"
}

# Function to check for suspicious browser extensions
check_browser_extensions() {
    log_message "Checking for suspicious browser extensions..." "INFO"
    
    echo "# Browser Extensions" > "$OUTPUT_DIR/browser_extensions.md"
    echo "Generated: $(date)" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "" >> "$OUTPUT_DIR/browser_extensions.md"
    
    # Check Chrome extensions
    CHROME_EXTENSIONS_DIR="$HOME/Library/Application Support/Google/Chrome/Default/Extensions"
    CHROME_EXTENSIONS_COUNT=0
    
    echo "## Chrome Extensions" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "" >> "$OUTPUT_DIR/browser_extensions.md"
    
    if [ -d "$CHROME_EXTENSIONS_DIR" ]; then
        echo "| Extension ID | Name | Description |" >> "$OUTPUT_DIR/browser_extensions.md"
        echo "|--------------|------|-------------|" >> "$OUTPUT_DIR/browser_extensions.md"
        
        for ext_id in "$CHROME_EXTENSIONS_DIR"/*; do
            if [ -d "$ext_id" ]; then
                ext_name="Unknown"
                ext_desc="Unknown"
                
                # Find the latest version directory
                latest_version=$(find "$ext_id" -maxdepth 1 -type d | sort -V | tail -1)
                
                if [ -f "$latest_version/manifest.json" ]; then
                    ext_name=$(grep -o '"name": "[^"]*"' "$latest_version/manifest.json" | head -1 | cut -d'"' -f4)
                    ext_desc=$(grep -o '"description": "[^"]*"' "$latest_version/manifest.json" | head -1 | cut -d'"' -f4)
                fi
                
                ext_id=$(basename "$ext_id")
                echo "| $ext_id | $ext_name | $ext_desc |" >> "$OUTPUT_DIR/browser_extensions.md"
                CHROME_EXTENSIONS_COUNT=$((CHROME_EXTENSIONS_COUNT + 1))
            fi
        done
        
        log_message "Found $CHROME_EXTENSIONS_COUNT Chrome extensions" "INFO"
    else
        echo "Chrome browser not found or no extensions installed." >> "$OUTPUT_DIR/browser_extensions.md"
    fi
    
    # Check Safari extensions
    SAFARI_EXTENSIONS_DIR="$HOME/Library/Safari/Extensions"
    SAFARI_EXTENSIONS_COUNT=0
    
    echo -e "\n## Safari Extensions" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "" >> "$OUTPUT_DIR/browser_extensions.md"
    
    if [ -d "$SAFARI_EXTENSIONS_DIR" ]; then
        echo "| Extension Name | Bundle ID |" >> "$OUTPUT_DIR/browser_extensions.md"
        echo "|----------------|-----------|" >> "$OUTPUT_DIR/browser_extensions.md"
        
        for ext in "$SAFARI_EXTENSIONS_DIR"/*.safariextz; do
            if [ -f "$ext" ]; then
                ext_name=$(basename "$ext" .safariextz)
                bundle_id="Unknown"
                
                # Try to extract bundle ID
                if [ -f "$ext/Info.plist" ]; then
                    bundle_id=$(defaults read "$ext/Info.plist" CFBundleIdentifier 2>/dev/null || echo "Unknown")
                fi
                
                echo "| $ext_name | $bundle_id |" >> "$OUTPUT_DIR/browser_extensions.md"
                SAFARI_EXTENSIONS_COUNT=$((SAFARI_EXTENSIONS_COUNT + 1))
            fi
        done
        
        log_message "Found $SAFARI_EXTENSIONS_COUNT Safari extensions" "INFO"
    else
        echo "Safari browser not found or no extensions installed." >> "$OUTPUT_DIR/browser_extensions.md"
    fi
    
    # Check Firefox extensions
    FIREFOX_PROFILES_DIR="$HOME/Library/Application Support/Firefox/Profiles"
    FIREFOX_EXTENSIONS_COUNT=0
    
    echo -e "\n## Firefox Extensions" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "" >> "$OUTPUT_DIR/browser_extensions.md"
    
    if [ -d "$FIREFOX_PROFILES_DIR" ]; then
        echo "| Extension ID | Profile |" >> "$OUTPUT_DIR/browser_extensions.md"
        echo "|--------------|---------|" >> "$OUTPUT_DIR/browser_extensions.md"
        
        for profile in "$FIREFOX_PROFILES_DIR"/*; do
            if [ -d "$profile/extensions" ]; then
                profile_name=$(basename "$profile")
                
                for ext in "$profile/extensions"/*; do
                    if [ -f "$ext" ] || [ -d "$ext" ]; then
                        ext_id=$(basename "$ext")
                        echo "| $ext_id | $profile_name |" >> "$OUTPUT_DIR/browser_extensions.md"
                        FIREFOX_EXTENSIONS_COUNT=$((FIREFOX_EXTENSIONS_COUNT + 1))
                    fi
                done
            fi
        done
        
        log_message "Found $FIREFOX_EXTENSIONS_COUNT Firefox extensions" "INFO"
    else
        echo "Firefox browser not found or no extensions installed." >> "$OUTPUT_DIR/browser_extensions.md"
    fi
    
    # Recommendations
    echo -e "\n## Recommendations" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "1. Review all browser extensions and remove any that are unnecessary" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "2. Research unknown extensions to verify their legitimacy" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "3. Only install extensions from official browser stores" >> "$OUTPUT_DIR/browser_extensions.md"
    echo "4. Regularly audit installed extensions and their permissions" >> "$OUTPUT_DIR/browser_extensions.md"
    
    log_message "Browser extensions check completed" "SUCCESS"
}

# Function to check for suspicious cron jobs
check_cron_jobs() {
    log_message "Checking for suspicious cron jobs..." "INFO"
    
    echo "# Cron Jobs" > "$OUTPUT_DIR/cron_jobs.md"
    echo "Generated: $(date)" >> "$OUTPUT_DIR/cron_jobs.md"
    echo "" >> "$OUTPUT_DIR/cron_jobs.md"
    
    # Get current user's crontab
    crontab -l > "$OUTPUT_DIR/user_crontab.txt" 2>/dev/null || echo "No crontab for $(whoami)" > "$OUTPUT_DIR/user_crontab.txt"
    
    echo "## User Crontab" >> "$OUTPUT_DIR/cron_jobs.md"
    echo "```" >> "$OUTPUT_DIR/cron_jobs.md"
    cat "$OUTPUT_DIR/user_crontab.txt" >> "$OUTPUT_DIR/cron_jobs.md"
    echo "```" >> "$OUTPUT_DIR/cron_jobs.md"
    
    # Check system crontabs (requires sudo)
    if check_privileges; then
        echo -e "\n## System Crontabs" >> "$OUTPUT_DIR/cron_jobs.md"
        
        # Check /etc/crontab
        if [ -f "/etc/crontab" ]; then
            echo -e "\n### /etc/crontab" >> "$OUTPUT_DIR/cron_jobs.md"
            echo "```" >> "$OUTPUT_DIR/cron_jobs.md"
            cat "/etc/crontab" >> "$OUTPUT_DIR/cron_jobs.md"
            echo "```" >> "$OUTPUT_DIR/cron_jobs.md"
        fi
        
        # Check /etc/cron.d directory
        if [ -d "/etc/cron.d" ]; then
            echo -e "\n### /etc/cron.d/" >> "$OUTPUT_DIR/cron_jobs.md"
            
            for cronfile in /etc/cron.d/*; do
                if [ -f "$cronfile" ]; then
                    echo -e "\n#### $(basename "$cronfile")" >> "$OUTPUT_DIR/cron_jobs.md"
                    echo "```" >> "$OUTPUT_DIR/cron_jobs.md"
                    cat "$cronfile" >> "$OUTPUT_DIR/cron_jobs.md"
                    echo "```" >> "$OUTPUT_DIR/cron_jobs.md"
                fi
            done
        fi
    else
        echo -e "\n## System Crontabs" >> "$OUTPUT_DIR/cron_jobs.md"
        echo "Run with sudo to view system crontabs." >> "$OUTPUT_DIR/cron_jobs.md"
    fi
    
    log_message "Cron jobs check completed" "SUCCESS"
}

# Function to check for suspicious network connections
check_network_connections() {
    log_message "Checking for suspicious network connections..." "INFO"
    
    echo "# Network Connections" > "$OUTPUT_DIR/network_connections.md"
    echo "Generated: $(date)" >> "$OUTPUT_DIR/network_connections.md"
    echo "" >> "$OUTPUT_DIR/network_connections.md"
    
    # Get all network connections
    netstat -an > "$OUTPUT_DIR/all_connections.txt"
    
    # Extract listening ports
    echo "## Listening Ports" >> "$OUTPUT_DIR/network_connections.md"
    echo "" >> "$OUTPUT_DIR/network_connections.md"
    echo "| Protocol | Local Address | State |" >> "$OUTPUT_DIR/network_connections.md"
    echo "|----------|---------------|-------|" >> "$OUTPUT_DIR/network_connections.md"
    
    grep "LISTEN" "$OUTPUT_DIR/all_connections.txt" | while read -r line; do
        protocol=$(echo "$line" | awk '{print $1}')
        local_addr=$(echo "$line" | awk '{print $4}')
        state=$(echo "$line" | awk '{print $6}')
        
        echo "| $protocol | $local_addr | $state |" >> "$OUTPUT_DIR/network_connections.md"
    done
    
    # Extract established connections
    echo -e "\n## Established Connections" >> "$OUTPUT_DIR/network_connections.md"
    echo "" >> "$OUTPUT_DIR/network_connections.md"
    echo "| Protocol | Local Address | Foreign Address | State |" >> "$OUTPUT_DIR/network_connections.md"
    echo "|----------|---------------|----------------|-------|" >> "$OUTPUT_DIR/network_connections.md"
    
    grep "ESTABLISHED" "$OUTPUT_DIR/all_connections.txt" | while read -r line; do
        protocol=$(echo "$line" | awk '{print $1}')
        local_addr=$(echo "$line" | awk '{print $4}')
        foreign_addr=$(echo "$line" | awk '{print $5}')
        state=$(echo "$line" | awk '{print $6}')
        
        echo "| $protocol | $local_addr | $foreign_addr | $state |" >> "$OUTPUT_DIR/network_connections.md"
    done
    
    # Get process information for each connection (requires sudo)
    if check_privileges; then
        echo -e "\n## Processes with Network Connections" >> "$OUTPUT_DIR/network_connections.md"
        echo "" >> "$OUTPUT_DIR/network_connections.md"
        echo "| PID | Process | Protocol | Local Address | Foreign Address | State |" >> "$OUTPUT_DIR/network_connections.md"
        echo "|-----|---------|----------|---------------|----------------|-------|" >> "$OUTPUT_DIR/network_connections.md"
        
        lsof -i -n -P > "$OUTPUT_DIR/lsof_network.txt" 2>/dev/null || true
        
        grep -v "COMMAND" "$OUTPUT_DIR/lsof_network.txt" | while read -r line; do
            process=$(echo "$line" | awk '{print $1}')
            pid=$(echo "$line" | awk '{print $2}')
            protocol=$(echo "$line" | awk '{print $8}')
            local_addr=$(echo "$line" | awk '{print $9}' | cut -d'-' -f1)
            foreign_addr=$(echo "$line" | awk '{print $9}' | cut -d'-' -f2 || echo "")
            state=$(echo "$line" | awk '{print $10}' || echo "")
            
            echo "| $pid | $process | $protocol | $local_addr | $foreign_addr | $state |" >> "$OUTPUT_DIR/network_connections.md"
        done
    else
        echo -e "\n## Processes with Network Connections" >> "$OUTPUT_DIR/network_connections.md"
        echo "Run with sudo to view process information for network connections." >> "$OUTPUT_DIR/network_connections.md"
    fi
    
    log_message "Network connections check completed" "SUCCESS"
}

# Function to generate a summary report
generate_summary() {
    log_message "Generating summary report..." "INFO"
    
    echo "# macOS Malware Scan Summary" > "$OUTPUT_DIR/summary.md"
    echo "Generated: $(date)" >> "$OUTPUT_DIR/summary.md"
    echo "" >> "$OUTPUT_DIR/summary.md"
    
    # Check for suspicious launch agents
    SUSPICIOUS_AGENTS_COUNT=$(grep -c "^|" "$OUTPUT_DIR/launch_agents.md" 2>/dev/null || echo "0")
    SUSPICIOUS_AGENTS_COUNT=$((SUSPICIOUS_AGENTS_COUNT - 1)) # Subtract header row
    
    # Check for suspicious processes
    SUSPICIOUS_PROCESSES_COUNT=$(grep -c "^|" "$OUTPUT_DIR/suspicious_processes.md" 2>/dev/null || echo "0")
    SUSPICIOUS_PROCESSES_COUNT=$((SUSPICIOUS_PROCESSES_COUNT - 2)) # Subtract header rows
    
    # Summary of findings
    echo "## Summary of Findings" >> "$OUTPUT_DIR/summary.md"
    echo "" >> "$OUTPUT_DIR/summary.md"
    
    if [ "$SUSPICIOUS_AGENTS_COUNT" -gt 0 ] || [ "$SUSPICIOUS_PROCESSES_COUNT" -gt 0 ]; then
        echo "⚠️ **Potential security issues detected!**" >> "$OUTPUT_DIR/summary.md"
    else
        echo "✅ **No major security issues detected.**" >> "$OUTPUT_DIR/summary.md"
    fi
    
    echo "" >> "$OUTPUT_DIR/summary.md"
    echo "- Suspicious launch agents/daemons: $SUSPICIOUS_AGENTS_COUNT" >> "$OUTPUT_DIR/summary.md"
    echo "- Suspicious processes: $SUSPICIOUS_PROCESSES_COUNT" >> "$OUTPUT_DIR/summary.md"
    
    # Recommendations
    echo -e "\n## Recommendations" >> "$OUTPUT_DIR/summary.md"
    echo "" >> "$OUTPUT_DIR/summary.md"
    echo "1. **Review Launch Agents**: Check all suspicious launch agents and daemons" >> "$OUTPUT_DIR/summary.md"
    echo "2. **Monitor Processes**: Keep an eye on high CPU usage processes" >> "$OUTPUT_DIR/summary.md"
    echo "3. **Check Browser Extensions**: Remove unnecessary or suspicious browser extensions" >> "$OUTPUT_DIR/summary.md"
    echo "4. **Audit Cron Jobs**: Ensure all scheduled tasks are legitimate" >> "$OUTPUT_DIR/summary.md"
    echo "5. **Monitor Network Connections**: Watch for unusual network activity" >> "$OUTPUT_DIR/summary.md"
    
    # Next steps
    echo -e "\n## Next Steps" >> "$OUTPUT_DIR/summary.md"
    echo "" >> "$OUTPUT_DIR/summary.md"
    echo "For any suspicious items found, consider the following actions:" >> "$OUTPUT_DIR/summary.md"
    echo "" >> "$OUTPUT_DIR/summary.md"
    echo "1. **Research**: Look up the item online to determine if it's legitimate" >> "$OUTPUT_DIR/summary.md"
    echo "2. **Isolate**: If malicious, disconnect the system from the network" >> "$OUTPUT_DIR/summary.md"
    echo "3. **Remove**: Delete malicious files and reset affected settings" >> "$OUTPUT_DIR/summary.md"
    echo "4. **Scan**: Run a full system scan with a reputable anti-malware tool" >> "$OUTPUT_DIR/summary.md"
    echo "5. **Monitor**: Continue monitoring the system for unusual activity" >> "$OUTPUT_DIR/summary.md"
    
    log_message "Summary report generated: $OUTPUT_DIR/summary.md" "SUCCESS"
}

# Main execution
display_banner
check_privileges

# Run all checks
check_launch_agents
check_suspicious_processes
check_browser_extensions
check_cron_jobs
check_network_connections
generate_summary

# Final output
log_message "Malware scan completed successfully" "SUCCESS"
log_message "All reports saved to: $OUTPUT_DIR" "SUCCESS"
echo -e "${GREEN}To view the summary report, open:${NC} $OUTPUT_DIR/summary.md"
